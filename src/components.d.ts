/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { StepData, } from "./components/my-calendar/my-calendar";
import { StepData as StepData1, } from "./components/my-facilities/my-facilities";
import { StepData as StepData2, } from "./components/my-form/my-form";
import { StepData as StepData3, } from "./components/my-service/my-service";
export namespace Components {
    interface MyButton {
        "buttonExpanded": boolean;
    }
    interface MyCalendar {
        "facilityId": any;
        "token_api": string;
    }
    interface MyComponent {
        "api": string;
    }
    interface MyConfirm {
        "modalData": any;
        "token_api": string;
    }
    interface MyFacilities {
        "token_api": string;
    }
    interface MyForm {
        "selectedTime": any;
    }
    interface MyLoader {
    }
    interface MyModal {
        "token": string;
    }
    interface MyService {
        "token_api": string;
    }
}
declare global {
    interface HTMLMyButtonElement extends Components.MyButton, HTMLStencilElement {
    }
    var HTMLMyButtonElement: {
        prototype: HTMLMyButtonElement;
        new (): HTMLMyButtonElement;
    };
    interface HTMLMyCalendarElement extends Components.MyCalendar, HTMLStencilElement {
    }
    var HTMLMyCalendarElement: {
        prototype: HTMLMyCalendarElement;
        new (): HTMLMyCalendarElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMyConfirmElement extends Components.MyConfirm, HTMLStencilElement {
    }
    var HTMLMyConfirmElement: {
        prototype: HTMLMyConfirmElement;
        new (): HTMLMyConfirmElement;
    };
    interface HTMLMyFacilitiesElement extends Components.MyFacilities, HTMLStencilElement {
    }
    var HTMLMyFacilitiesElement: {
        prototype: HTMLMyFacilitiesElement;
        new (): HTMLMyFacilitiesElement;
    };
    interface HTMLMyFormElement extends Components.MyForm, HTMLStencilElement {
    }
    var HTMLMyFormElement: {
        prototype: HTMLMyFormElement;
        new (): HTMLMyFormElement;
    };
    interface HTMLMyLoaderElement extends Components.MyLoader, HTMLStencilElement {
    }
    var HTMLMyLoaderElement: {
        prototype: HTMLMyLoaderElement;
        new (): HTMLMyLoaderElement;
    };
    interface HTMLMyModalElement extends Components.MyModal, HTMLStencilElement {
    }
    var HTMLMyModalElement: {
        prototype: HTMLMyModalElement;
        new (): HTMLMyModalElement;
    };
    interface HTMLMyServiceElement extends Components.MyService, HTMLStencilElement {
    }
    var HTMLMyServiceElement: {
        prototype: HTMLMyServiceElement;
        new (): HTMLMyServiceElement;
    };
    interface HTMLElementTagNameMap {
        "my-button": HTMLMyButtonElement;
        "my-calendar": HTMLMyCalendarElement;
        "my-component": HTMLMyComponentElement;
        "my-confirm": HTMLMyConfirmElement;
        "my-facilities": HTMLMyFacilitiesElement;
        "my-form": HTMLMyFormElement;
        "my-loader": HTMLMyLoaderElement;
        "my-modal": HTMLMyModalElement;
        "my-service": HTMLMyServiceElement;
    }
}
declare namespace LocalJSX {
    interface MyButton {
        "buttonExpanded"?: boolean;
    }
    interface MyCalendar {
        "facilityId"?: any;
        "onStepChange"?: (event: CustomEvent<StepData>) => void;
        "token_api"?: string;
    }
    interface MyComponent {
        "api"?: string;
    }
    interface MyConfirm {
        "modalData"?: any;
        "token_api"?: string;
    }
    interface MyFacilities {
        "onStepChange"?: (event: CustomEvent<StepData>) => void;
        "token_api"?: string;
    }
    interface MyForm {
        "onStepChange"?: (event: CustomEvent<StepData>) => void;
        "selectedTime"?: any;
    }
    interface MyLoader {
    }
    interface MyModal {
        "token"?: string;
    }
    interface MyService {
        "onStepChange"?: (event: CustomEvent<StepData>) => void;
        "token_api"?: string;
    }
    interface IntrinsicElements {
        "my-button": MyButton;
        "my-calendar": MyCalendar;
        "my-component": MyComponent;
        "my-confirm": MyConfirm;
        "my-facilities": MyFacilities;
        "my-form": MyForm;
        "my-loader": MyLoader;
        "my-modal": MyModal;
        "my-service": MyService;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-button": LocalJSX.MyButton & JSXBase.HTMLAttributes<HTMLMyButtonElement>;
            "my-calendar": LocalJSX.MyCalendar & JSXBase.HTMLAttributes<HTMLMyCalendarElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-confirm": LocalJSX.MyConfirm & JSXBase.HTMLAttributes<HTMLMyConfirmElement>;
            "my-facilities": LocalJSX.MyFacilities & JSXBase.HTMLAttributes<HTMLMyFacilitiesElement>;
            "my-form": LocalJSX.MyForm & JSXBase.HTMLAttributes<HTMLMyFormElement>;
            "my-loader": LocalJSX.MyLoader & JSXBase.HTMLAttributes<HTMLMyLoaderElement>;
            "my-modal": LocalJSX.MyModal & JSXBase.HTMLAttributes<HTMLMyModalElement>;
            "my-service": LocalJSX.MyService & JSXBase.HTMLAttributes<HTMLMyServiceElement>;
        }
    }
}
